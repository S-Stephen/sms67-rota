<!DOCTYPE html>
<html>
  <head>
    <title>Security rota app</title>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/vendor/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/styles/vendor/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/vendor/custom.css">
    <link rel="stylesheet" href="/styles/vendor/starter-template.css">
    <!--STYLES END-->
  </head>

  <body>

    
    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Security Rota</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#">Home</a></li>
            <li><a href="#about">About</a></li>
            <li><a href="#contact">Contact</a></li>
			<% if( typeof(user) !== 'undefined' && user.manager ){ %>
			<li><a href="manage">Manage</a></li>
			<% } %>
          </ul>
         <% if( typeof(user) !== 'undefined' ){ %>
         <form class="navbar-form navbar-right" method="post" action="/logout">
         <i class="glyphicon glyphicon-user white"></i>
         <button id="logout" type="submit" class="btn btn-danger">Logout <%= user.username %></button>
         </form>
	     <% }else{ %>
         <form class="navbar-form navbar-right" method="post" action="/login">
         <i class="glyphicon glyphicon-user white"></i>
         <button id="login" type="submit" class="btn btn-success">Login</button>
         </form>
         <% } %>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

	
	<%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery-2.1.4.min.js"></script>
    <script src="/js/dependencies/angular.js"></script>
    <script src="/js/dependencies/bootstrap.js"></script>
    <script src="/js/dependencies/ui-bootstrap-tpls-0.13.0.min.js"></script>
    <script src="/js/manager/MembershipModule.js"></script>
    <script src="/js/local/manage_user_modal.js"></script>
    <script src="/js/manager/MemberController.js"></script>
    <script src="/js/manager/MembershipController.js"></script>
    <script src="/js/manager/SchedulesModule.js"></script>
    <script src="/js/vendor/custom.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
